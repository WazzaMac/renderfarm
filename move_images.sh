#!/bin/bash

# move_images.sh - moves an image sequence to compositing directory

#   run using ./ not sh

# declare constants and arrays

declare -r unk="unknown";
declare -r fil="files";
declare -r emp="empty";
declare -r ntf="not_found";
declare -r rbn="/home/master/render_bin";
declare -r com="/home/master/compositing";
declare -r pim="/home/master/prod/prod_render/prod_images";
declare -r tim="/home/master/test/test_render/test_images";
declare -r tmp="/home/master/tmp";

declare -a img_seqs;

# set colour variables
green="\033[0;32m"
yellow="\033[0;33m"
blue="\033[0;34m"
clear="\033[0m"

# define user functions

# function error_exit checks return code and exits 
error_exit () {
  echo
  echo "$1"
  echo -e ${yellow};
  echo "Exiting ..........";
  echo -e ${clear};
  sleep 3;
  exit 1;
}

# function confirm prompts user to confirm input or selection
confirm() {
  echo
  read -p "Confirm (Y/y)? " -n 1 -r;
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    error_exit "No confirmation";
  fi  
}

# function contin prompts user to continue to next
contin() {
  echo
  read -p "Continue (Y/y)? " -n 1 -r;
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo
    echo -e ${green};
    echo "Exiting ..........";
    echo -e ${clear};
    exit 0;
  fi  
}

# funtion menu displays a pick list of items in an array
menu() {
  select item ; do
  if [ 1 -le "$REPLY" ] && [ "$REPLY" -le $# ]; then
    echo "$item selected";
    echo
    break;
  else
    echo "Select by a number from 1-$#";
  fi
done
}

# function check empty checks there are no files or directories present
check_empty() {
  if [ -n "$(find $1 -maxdepth 0 -empty 2> /dev/null)" ]; then  
    status=$emp;
  else
    status=$fil;
  fi 
}

# function delete_spurious - deletes spurious files from a directory
# Note1: Spurious files are files that will have a determinetal effect on Blender
# when loading images for compositing.  Spurious files include empty files
# and hidden .DS_Store files generated by file manager applications such as Finder.
# Note2: Although potentially dangerous the '*' method is necessary because
# suffixes are added to multiple files e.g ".DS_Store" "._.DS_Store"...

delete_spurious () {
cd $1
`find . -name '*.DS_Store' -type f -delete`;
cd $2;
}

# function remove_hidden - removes all hiddent files and directories

remove_hidden() {
  cd $1;
  if [[ -n $(find . -mindepth 1 -name '.*') ]]; then
    echo "Hidden files found";
    find . -mindepth 1 -name '.*';
    echo
    echo "Removing hidden files";
    rm -rf .* 2> /dev/null;   
  else
    echo
    echo "No hidden files found";
  fi
  cd $2
}

# function move_file uses cp-rm - moves file (1) from source (2) to dest (3)
move_file() {
  if [ -f "$3/$1" ]; then
    error_exit "Duplicate file $infile";
  else
    if cp "$2/$1" "$3"; then
      rm "$2/$1";
    fi
  fi
}

###
# Display run notice
###

echo -e ${blue};
clear
echo
echo "     ***************"
echo "     * MOVE IMAGES *"
echo "     ***************"
echo 
echo "     Moves an image sequence to compositing directory."
echo "     and deletes all hidden files"
echo
echo -e ${clear};
contin 

###
# Check status of source and destination directories
###

cd ~/render_bin;

# Delete any spurious hidden files

echo
echo "Deleting spurious and hidden files ..........";
echo

delete_spurious $pim $rbn;

remove_hidden $pim $rbn;

delete_spurious $com $rbn;

remove_hidden $com $rbn;

echo
echo "Checking compositing directory status ..........";
echo

# Check if compositing directory is empty

status="$unk";

check_empty "$com";

if [ "$status" = "$fil" ]; then
  error_exit "$com status is $status";
else
  echo "$com status is $status";
fi

echo
echo "Checking image directory status ..........";
echo

# Check if image directory has files
  
status="$unk";

check_empty "$pim";

if [ "$status" = "$emp" ]; then
  error_exit "$pim status is $status";
else
  echo "$pim status is $status";
fi


###
# Display a pick lst of image sequences
###

echo
echo "Compiling list of image sequences..........";
echo

last_seq=" ";
last_frm=" ";

cd $pim
ls *.png | sort -t'-' -k1,1 -k2,2 | while read imgfile; do
  seq=$(echo $imgfile | cut -d'-' -f 1)
  frm=$(echo $imgfile | cut -d'-' -f 2)
  if [[ "$seq" == "$last_seq" ]]; then  
    last_frm=$frm
  else
    last_seq=$seq
    echo "$seq-####" >> /home/master/tmp/seqs.txt
  fi
done

# Recover sequences from external file

tmp_seqs="$tmp/seqs.txt"
while read line; do
  img_seqs[${#img_seqs[@]}]="${line}";
done < $tmp_seqs

rm "$tmp/seqs.txt";

# display pick list

echo
echo "Select image sequence for transfer:";
echo "------------------------------------";

menu "${img_seqs[@]}"

seq=$item;

###
# Transfer image sequence
###

# Confirm transfer

echo
echo "Transfer image sequence $seq";

confirm

# Transfer image sequence

jobnum=$(echo $seq | cut -d'-' -f 1)

echo
echo
echo "Transfering image files ..........";
echo

###
# Move selected image sequence from image directory to compositing
###

ls $jobnum*.* | while read img_file; do
  move_file $img_file $pim $com;
done
echo "Image count is: "; ls $com | wc -l;
echo
echo
echo "$seq ready for compositing.";
echo
echo -e ${green};
echo "Exiting ..........";
echo -e ${clear};
sleep 3;

exit 0;






