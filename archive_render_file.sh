#!/bin/bash

# archive_render_file.sh - moves render files to for_archive directory

#   run using ./ not sh

# declare constants, variables and arrays

declare -r unk="unknown";
declare -r fil="files";
declare -r emp="empty";
declare -r ntf="not_found";
declare -r rbn="/home/master/render_bin";
declare -r tmp="/home/master/tmp";
declare -r prd="/home/master/prod/prod_render/"
declare -r far="/home/master/for_archive";
declare -a blender_files;

# set colour variables
green="\033[0;32m"
yellow="\033[0;33m"
blue="\033[0;34m"
clear="\033[0m"

# define user functions

# function error_exit checks return code and exits 
error_exit () {
  echo
  echo "$1"
  echo -e ${yellow};
  echo "Exiting ..........";
  echo -e ${clear};
  sleep 3;
  exit 1;
}

# function confirm prompts user to confirm input or selection
confirm() {
  echo
  read -p "Confirm (Y/y)? " -n 1 -r;
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    error_exit "No confirmation";
  fi  
}

# function contin prompts user to continue to next
contin() {
  echo
  read -p "Continue (Y/y)? " -n 1 -r;
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo
    echo -e ${green};
    echo "Exiting ..........";
    echo -e ${clear};
    exit 0;
  fi  
}

# funtion menu displays a pick list of items in an array
menu() {
  select item ; do
  if [ 1 -le "$REPLY" ] && [ "$REPLY" -le $# ]; then
    echo "$item selected";
    echo
    break;
  else
    echo "Select by a number from 1-$#";
  fi
done
}

# function check empty checks there are no files or directories present
check_empty() {
  if [ -n "$(find $1 -maxdepth 0 -empty 2> /dev/null)" ]; then  
    status=$emp;
  else
    status=$fil;
  fi 
}

# function delete_spurious - deletes spurious files from a directory
# Note1: Spurious files are files that will have a determinetal effect on Blender
# when loading images for compositing.  Spurious files include empty files
# and hidden .DS_Store files generated by file manager applications such as Finder.
# Note2: Although potentially dangerous the '*' method is necessary because
# suffixes are added to multiple files e.g ".DS_Store" "._.DS_Store"...

delete_spurious () {
cd $1
`find . -name '*.DS_Store' -type f -delete`;
cd $2;
}

# function remove_hidden - removes all hiddent files and directories

remove_hidden() {
  cd $1;
  if [[ -n $(find . -mindepth 1 -name '.*') ]]; then
    echo "Hidden files found";
    find . -mindepth 1 -name '.*';
    echo
    echo "Removing hidden files";
    rm -rf .* 2> /dev/null;   
  else
    echo
    echo "No hidden files found";
  fi
  cd $2
}

# function move_file uses cp-rm - moves file (1) from source (2) to dest (3)
move_file() {
  if [ -f "$3/$1" ]; then
    error_exit "Duplicate file $infile";
  else
     if cp "$2/$1" "$3"; then
       rm "$2/$1";
     fi
fi
}

###
# Display run notice
###

echo -e ${blue};
clear
echo
echo "     ***********************"
echo "     * ARCHIVE RENDER FILE *"
echo "     ***********************"
echo 
echo "     Moves selected Blender file to for_archive directory."
echo "     and deletes all hidden files"
echo
echo -e ${clear};
contin 

cd ~/render_bin;

# Delete any spurious hidden files

echo
echo "Deleting spurious and hidden files ..........";
echo

remove_hidden $prd $rbn;

remove_hidden $far $rbn;

###
# Check status of source directory
###

echo
echo "Checking Render directory status ..........";
echo

status="$unk";

check_empty "$prd";

if [ "$status" = "$emp" ]; then
  error_exit "$prd status is $status";
else
  echo "$prd status is $status";
fi

###
# Display of a pick list of render files
###


# read files in render directory

cd $prd

file_list=`ls *.blend 2> /dev/null`;

cd $rbn

# Copy files from sting to array

file_count=0;
for file in $file_list; do
  blender_files+=("$file");
  file_count+=1;
done

if [ "$file_count" -eq 0 ]; then
  error_exit "No Blender files to move";
fi

# Display available Blender files and confirm archive

echo
echo "Blender files available for archive:";
echo "------------------------------------";
for file in "${blender_files[@]}"; do
  echo $file;
done

contin  


# pick file to move

echo
echo
echo "Select file to move:";
echo "--------------------";

menu "${blender_files[@]}"

mov_file=$item;

# move selectd file

move_file $mov_file $prd $far

echo
echo "$mov_file moved to $far";
echo
echo -e ${green};
echo "Exiting ..........";
echo -e ${clear};
sleep 3;  
 
exit 0








